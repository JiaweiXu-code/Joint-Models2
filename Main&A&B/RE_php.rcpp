 require(Rcpp);
 require(RcppArmadillo);
 require(RcppNumerical);

sourceCpp(code='

   // [[Rcpp::depends(RcppArmadillo)]]
   // [[Rcpp::depends(RcppEigen)]]
   // [[Rcpp::depends(RcppNumerical)]]
   #include <RcppArmadillo.h>
   #include <RcppNumerical.h> 
   #include <RcppArmadilloExtensions/sample.h>

 
#include <cmath>
#include <random>
#include <string>
#include <vector>
   
   using namespace Rcpp;
   using namespace Numer;  
   
//------------------------------------ Class Specific Functions -------------------------------------------//
class slice_mcmc{
    
	public:
	
	int         Nobs;                 // number of observations
    int         Ngroups;              // number of patients  
    int         NpredsP;              // number of covariates 
    int         NpredsQ;              // number of covariates 	
    arma::mat   xP;                   //covariate matrix of recurrence
    arma::mat   xQ;                   //covariate matrix of time-to-event
	int nAll;                         // number of parameters
	
    // time-to-event data                                                                              
    arma::vec               t;                    // time-to-event time
    arma::vec               censorship;           //censorship for terminating data 
    int                     Q;                    // Number of pieces
    arma::vec               qcutpoints;           // Cutopoints on time, cutpoints[1] = 0, max(event time) < cutpoints[Q+1] < Inf, Q+1 elements 
    arma::vec               index;                // unique ID positions  
	
    // recurrent data                                                                            
    arma::vec               gap;                  // recurrent time
    arma::vec               censor;               //censorship for recurrent data 
    int                     P;                    // Number of pieces
    arma::vec               pcutpoints;           // Cutopoints on time, cutpoints[1] = 0, max(event time) < cutpoints[P+1] < Inf, P+1 elements 
    arma::vec               group;                // grouped by ID
	
    double 	                sigma_norm;
	double                  sigma_gammaB;
	double                  sigma_gammaR;
	
	// slice sampling
	arma::vec               lower_limits;
	arma::vec               upper_limits;
	arma::vec               slice_widths;	
    int                     m;

	
	// public member functions;
	slice_mcmc(int & Nobs0, int & Ngroups0, arma::mat & xP0, arma::mat & xQ0, arma::vec & t0, arma::vec & censorship0, int & Q0, arma::vec & qcutpoints0, arma::vec & index0, 
	           arma::vec & gap0, arma::vec & censor0, int & P0, arma::vec & pcutpoints0, arma::vec & group0, double & sigma_norm0, double & sigma_gammaB0, double & sigma_gammaR0, 
			   arma::vec & lower_limits0, arma::vec & upper_limits0, arma::vec & slice_widths0);
	
	double logPD(const arma::vec & parm0, const int & Mn, const arma::vec & mu0, const arma::vec & nu0, const arma::vec & r0, const arma::vec & l0);  // log of posterior distribution 
	std::vector<arma::vec> RE(const arma::vec & parm0, const int & Mn, const arma::vec & r0, const arma::vec & l0);           // compute shape and scale parameters for random effects
	std::vector<arma::vec> BH(const arma::vec & parm0, const int & Mn, const arma::vec & mu0, const arma::vec & nu0);       // compute shape and scale parameters for baseline hazards
};   
   


slice_mcmc::slice_mcmc(int & Nobs0, int & Ngroups0, arma::mat & xP0, arma::mat & xQ0, arma::vec & t0, arma::vec & censorship0, int & Q0, arma::vec & qcutpoints0, arma::vec & index0, 
	                   arma::vec & gap0, arma::vec & censor0, int & P0, arma::vec & pcutpoints0, arma::vec & group0, double & sigma_norm0, double & sigma_gammaB0, double & sigma_gammaR0,
					   arma::vec & lower_limits0, arma::vec & upper_limits0, arma::vec & slice_widths0)
{
	Nobs         = Nobs0;     
    Ngroups      = Ngroups0;
    xP           = xP0; 
    xQ           = xQ0;	
    NpredsP      = xP.n_cols;     
    NpredsQ      = xQ.n_cols;     
                                                                                
    t            = t0;          
    censorship   = censorship0;  
    Q            = Q0;           
    qcutpoints   = qcutpoints0;  
    index        = index0;         
	                                                                          
    gap          = gap0;       
    censor       = censor0;      
    P            = P0;           
    pcutpoints   = pcutpoints0;  
    group        = group0; 
	
	nAll = NpredsP + NpredsQ + 2;

    sigma_norm   = sigma_norm0;
    sigma_gammaB = sigma_gammaB0;            
    sigma_gammaR = sigma_gammaR0;           
	
	lower_limits = lower_limits0;
	upper_limits = upper_limits0;
	slice_widths = slice_widths0;

    m = 10;	

}


std::vector<arma::vec> slice_mcmc::BH(const arma::vec & parm0, const int & Mn, const arma::vec & mu0, const arma::vec & nu0)
{
	arma::vec a_r(P), a_l(Q), b_r(P), b_l(Q), mu = mu0, nu = nu0;
	double phi1, phi2;
	std::vector<arma::vec> hazard_parms(4);
	int nP, nQ;	
	
	if (Mn == 1)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ;
	}
	else if (Mn == 4)
	{ 
	    nP = NpredsP-1; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 2)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 3)
	{
	    nP = NpredsP-1; 
		nQ = NpredsQ; 
	}
	
	arma::vec parm1 = parm0.rows(0,nP-1), parm2 = parm0.rows(nP,nQ+nP-1);
	
    // Loop over pieces of terminating time 
    for ( int q=0;q<Q;q++)
	{ 
        double qlength = qcutpoints[q+1] - qcutpoints[q];
		b_l[q] = sigma_gammaB;
		a_l[q] = sigma_gammaB;
		
        for (int e=0;e<Ngroups;e++)
		{
            int i = index[e]-1;
			if ( (Mn == 1) or (Mn == 3) )
			{ 
			    phi2 = exp( xQ(i,0)*parm2[0] + xQ(i,1)*parm2[1] ); 
			}
	        else if ( (Mn == 4) or (Mn == 2) )
			{ 
			    phi2 = exp( xQ(i,1)*parm2[0] ); 
			}
		
            // Everyone will contribute to the survival part.
            if (t[i] >= qcutpoints[q+1]) 
			{
                b_l[q] += phi2 * qlength * mu[e];
            } 
			else if (qcutpoints[q] <= t[i] and t[i] < qcutpoints[q+1])
			{
                b_l[q] += phi2 * (t[i] - qcutpoints[q]) * mu[e];
                a_l[q] += censorship[i];
            }
        }
    }
    
    // Loop over pieces of recurrent time 
    for (int p=0;p<P;p++) 
	{
        double plength = pcutpoints[p+1] - pcutpoints[p];
		a_r[p] = sigma_gammaB;
		b_r[p] = sigma_gammaB;
		
        for (int j=0;j<Nobs;j++)
		{
		    int g = group[j]-1;
			if ( (Mn == 1) or (Mn == 2) )
			{ 
			    phi1 = exp( xP(j,0)*parm1[0] + xP(j,1)*parm1[1] ); 
		    }
	        else if ( (Mn == 4) or (Mn == 3) )
			{ 
			    phi1 = exp( xP(j,1)*parm1[0] ); 
			}
 
            if (pcutpoints[p] <= gap[j] and gap[j] < pcutpoints[p+1])
			{
                b_r[p] += phi1 * (gap[j] - pcutpoints[p]) * mu[g] * nu[g];
                a_r[p] += censor[j]; 
            } 
			else if (gap[j] >= pcutpoints[p+1])
			{
                b_r[p] += phi1 * plength * mu[g] * nu[g];
            }       
        }
    }
	
	hazard_parms[0] = a_r;
	hazard_parms[1] = a_l;
	hazard_parms[2] = b_r;
	hazard_parms[3] = b_l;
	
    return hazard_parms;
}


std::vector<arma::vec> slice_mcmc::RE(const arma::vec & parm0, const int & Mn, const arma::vec & r0, const arma::vec & l0)
{
	arma::vec censor_re(Ngroups), a_mu(Ngroups), a_nu(Ngroups), cum_re(Ngroups,arma::fill::zeros), cum_ter(Ngroups,arma::fill::zeros);
	double phi1, phi2;
	std::vector<arma::vec> gamma_parms(4);
	int nP, nQ;	
	
	if (Mn == 1)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ;
	}
	else if (Mn == 4)
	{ 
	    nP = NpredsP-1; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 2)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 3)
	{
	    nP = NpredsP-1; 
		nQ = NpredsQ; 
	}
	
	arma::vec parm1 = parm0.rows(0,nP-1), parm2 = parm0.rows(nP,nQ+nP-1), plambda = r0, qlambda = l0;
	double theta = parm0[nQ+nP], eta = parm0[nQ+nP+1];
	
	for (int e=0;e<Ngroups-1;e++)
    {
	    censor_re[e] = index[e+1]-index[e]-1;
	}
	censor_re[Ngroups-1] = Nobs - index[Ngroups-1];	
	
	for (int e=0;e<Ngroups;e++)
    {
		a_mu[e]      = censor_re[e] + censorship[index[e]-1]  + 1/(theta);
		a_nu[e]      = censor_re[e] + 1/(eta);
	}

    for (int e=0;e<Ngroups;e++)
	{
	    int i = index[e]-1;
		if ( (Mn == 1) or (Mn == 3) )
		{ 
			phi2 = exp( xQ(i,0)*parm2[0] + xQ(i,1)*parm2[1] ); 
		}
	    else if ( (Mn == 4) or (Mn == 2) )
		{ 
		    phi2 = exp( xQ(i,1)*parm2[0] ); 
		}
		
	    for (int q=0;q<Q;q++)
	    {
		    double qlength = qcutpoints[q+1] - qcutpoints[q];
			
			if (t[i] >= qcutpoints[q+1]) 
			{
                cum_ter[e] += phi2 * qlambda[q] * qlength;
            } 
			else if (qcutpoints[q] <= t[i] and t[i] < qcutpoints[q+1])
			{
                cum_ter[e] += phi2 * qlambda[q] * (t[i] - qcutpoints[q]);
            }
		}
	}

    for (int j=0;j<Nobs;j++)
	{
	    int g = group[j]-1;
		if ( (Mn == 1) or (Mn == 2) )
		{ 
		    phi1 = exp( xP(j,0)*parm1[0] + xP(j,1)*parm1[1] ); 
		}
	    else if ( (Mn == 4) or (Mn == 3) )
		{ 
		    phi1 = exp( xP(j,1)*parm1[0] ); 
		}
		
	    for (int p=0;p<P;p++) 
	    {
		    double plength = pcutpoints[p+1] - pcutpoints[p];
			
			if (pcutpoints[p] <= gap[j] and gap[j] < pcutpoints[p+1])
			{
                cum_re[g] += phi1 * plambda[p] * (gap[j] - pcutpoints[p]); 
            } 
			else if (gap[j] >= pcutpoints[p+1])
			{
                cum_re[g] += phi1 * plambda[p] * plength;
            }  
		}
    }
	
	gamma_parms[0] = a_mu;
	gamma_parms[1] = a_nu;
	gamma_parms[2] = cum_re;
	gamma_parms[3] = cum_ter;
    return gamma_parms;
}



double slice_mcmc::logPD(const arma::vec & parm0, const int & Mn, const arma::vec & mu0, const arma::vec & nu0, const arma::vec & r0, const arma::vec & l0)
{
    double lc = 0, phi2, phi1;
	arma::vec mu = mu0, nu = nu0; 
	
	int nP, nQ;	
	if (Mn == 1)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ;
	}
	else if (Mn == 4)
	{ 
	    nP = NpredsP-1; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 2)
	{ 
	    nP = NpredsP; 
		nQ = NpredsQ-1; 
	}
	else if (Mn == 3)
	{
	    nP = NpredsP-1; 
		nQ = NpredsQ; 
	}
	
	arma::vec parm1 = parm0.rows(0,nP-1), parm2 = parm0.rows(nP,nQ+nP-1), plambda = r0, qlambda = l0;
	double theta = parm0[nQ+nP], eta = parm0[nQ+nP+1];

	for (int s=0;s<nP;s++)
	{
	    lc += R::dnorm(parm1[s],0,sigma_norm, 1);       // mean,sd
	}
    for (int r=0;r<nQ;r++)
    {
	    lc += R::dnorm(parm2[r],0,sigma_norm, 1);
    }	
	
	for (int p=0;p<P;p++)
	{
		lc += R::dgamma(plambda[p],sigma_gammaB,1/sigma_gammaB, 1);
	}
	for (int q=0;q<Q;q++)
	{
		lc += R::dgamma(qlambda[q],sigma_gammaB,1/sigma_gammaB, 1);
	}
	
	//lc += R::dgamma(exp(theta),sigma_gamma,1/sigma_gamma, 1) + theta;
	//lc += R::dgamma(exp(eta),sigma_gamma,1/sigma_gamma, 1) + eta;
	lc += R::dgamma(theta,sigma_gammaR,1/sigma_gammaR, 1);
	lc += R::dgamma(eta,sigma_gammaR,1/sigma_gammaR, 1);
	for (int i=0;i<Ngroups;i++)
	{
        lc += R::dgamma(mu[i],1/theta,theta, 1);
	    lc += R::dgamma(nu[i],1/eta,eta, 1);         
    }
	

    // Loop over pieces of terminating time 
    for ( int q=0;q<Q;q++)
	{ 
        double qlength = qcutpoints[q+1] - qcutpoints[q];
		
        for (int e=0;e<Ngroups;e++)
		{
            int i = index[e]-1;
			if ( (Mn == 1) or (Mn == 3) )
			{ 
			    phi2 = exp( xQ(i,0)*parm2[0] + xQ(i,1)*parm2[1] ); 
			}
	        else if ( (Mn == 4) or (Mn == 2) )
			{ 
			    phi2 = exp( xQ(i,1)*parm2[0] ); 
			}
		
            // Everyone will contribute to the survival part.
            if (t[i] >= qcutpoints[q+1]) 
			{
                lc += -phi2 * qlambda[q] * qlength * mu[e];
            } 
			else if (qcutpoints[q] <= t[i] and t[i] < qcutpoints[q+1])
			{
                lc += -phi2 * qlambda[q] * (t[i] - qcutpoints[q]) * mu[e];
                lc += censorship[i] * ( log(phi2) + log(qlambda[q]) + log(mu[e]) );
            }
        }
    }
    
    // Loop over pieces of recurrent time 
    for (int p=0;p<P;p++) 
	{
        double plength = pcutpoints[p+1] - pcutpoints[p];
		
        for (int j=0;j<Nobs;j++)
		{
		    int g = group[j]-1;
			if ( (Mn == 1) or (Mn == 2) )
			{ 
			    phi1 = exp( xP(j,0)*parm1[0] + xP(j,1)*parm1[1] ); 
		    }
	        else if ( (Mn == 4) or (Mn == 3) )
			{ 
			    phi1 = exp( xP(j,1)*parm1[0] ); 
			}
 
            if (pcutpoints[p] <= gap[j] and gap[j] < pcutpoints[p+1])
			{
                lc += -phi1 * plambda[p] * (gap[j] - pcutpoints[p]) * mu[g] * nu[g];
                lc += censor[j] * ( log(phi1) + log(plambda[p]) + log(mu[g]) + log(nu[g]) ); 
            } 
			else if (gap[j] >= pcutpoints[p+1])
			{
                lc += -phi1 * plambda[p] * plength * mu[g] * nu[g];
            }       
        }
    }
	
    return lc;

}


 
void slice( arma::vec & parms, slice_mcmc & b, const int & Mn, const arma::vec & mu0, const arma::vec & nu0, const arma::vec & r0, const arma::vec & l0)  
{

	double b0, f0, f0_L, f0_R, f0_x1, h0, L, R, V, J, K, w, lower, upper;
    arma::vec parm0;
	
	int nPQ;
    arma::vec nlower;	
	if (Mn == 1)
	{ 
	    nPQ = b.nAll;
		nlower = b.lower_limits;
	}
	else if (Mn == 4)
	{ 
	    nPQ = b.nAll-2; 
		nlower.set_size(nPQ);
		nlower.rows(0,nPQ-3) = b.lower_limits.rows(0,nPQ-3);
        nlower.rows(nPQ-2,nPQ-1) = b.lower_limits.rows(b.NpredsP + b.NpredsQ,b.nAll-1);		
	}
	else{
    	nPQ = b.nAll-1; 
		nlower.set_size(nPQ);
		nlower.rows(0,nPQ-3) = b.lower_limits.rows(0,nPQ-3);
        nlower.rows(nPQ-2,nPQ-1) = b.lower_limits.rows(b.NpredsP + b.NpredsQ,b.nAll-1);		
	}
	
	for (int p = 0; p < nPQ; p++) 
	{	
		// create vector of parameters to modify for slice sampling;
		parm0 = parms;

		// extract slice width and parameter bounds;
        w     = b.slice_widths[p];
        lower = nlower[p];
        upper = b.upper_limits[p];	

		// skip over fixed parameter values;
		if (lower==upper){parms(p) = lower;} 
        else
        {
			// current value of the parameter in question;
			b0 = parm0(p);
		
			// calculate current full conditional value;
			f0 = b.logPD(parm0,Mn,mu0,nu0,r0,l0);

			// calculate height of the horizontal slice;
			h0 = f0 - R::rexp(1.0);		

			// Calculate initial horizontal interval;
			L = parm0(p) - R::runif(0.0,1.0)*w;
			R = L+w;  

			// Truncate bounds to support of the parameter space;
			L = std::max(L,lower);
			R = std::min(R,upper);
			  
			// Step out;
			V = R::runif(0.0,1.0);
			J = floor(b.m*V);
			K = (b.m-1)-J;

			// compute log of full conditional at current boundaries;
			parm0(p) = L; f0_L = b.logPD(parm0,Mn,mu0,nu0,r0,l0);
			parm0(p) = R; f0_R = b.logPD(parm0,Mn,mu0,nu0,r0,l0); 

			while(J>0 and h0<f0_L and L>=lower)
			{
				L        = L-w; if (L<=lower) {L=lower;}
				J        = J-1;
				parm0(p) = L; 
				f0_L     = b.logPD(parm0,Mn,mu0,nu0,r0,l0); 
			}
			while(K>0 and h0<f0_R and R<=upper)
			{
				R        = R+w; if (R>=upper) {R=upper;}
				K        = K-1;
				parm0(p) = R; 
				f0_R     = b.logPD(parm0,Mn,mu0,nu0,r0,l0); 
			}				

			// perform rejection sampling;
			int stop  = 0;
			while(stop == 0)
			{
				parm0(p)     = L + R::runif(0.0,1.0)*(R-L);
				f0_x1        = b.logPD(parm0,Mn,mu0,nu0,r0,l0);

				if      ( h0       <  f0_x1 ) { parms(p) = parm0(p); stop = 1;  }
				else if ( parm0(p) <  b0    ) { L = parm0(p);                     }
				else if ( parm0(p) >= b0    ) { R = parm0(p);                     }

				if (-0.0000000001 <= L-R and L-R <= 0.0000000001)
				{
					parms(p)= 0.5*(L+R);
					stop      = 1;
				}
			}	
        }
	}
} 




// [[Rcpp::export]]
    Rcpp::List JM(int Nobs0, int Ngroups0, arma::mat xP0, arma::mat xQ0, arma::vec t0, arma::vec censorship0, arma::vec gap0, arma::vec censor0, int P0, int Q0,
	              arma::vec pcutpoints0, arma::vec group0, arma::vec qcutpoints0, arma::vec index0, std::vector<arma::vec> init_theta0, arma::vec lower_limits0, 
				  arma::vec upper_limits0, arma::vec slice_widths0, double sigma_norm0, double sigma_gammaB0, double sigma_gammaR0, double xi_r0, double xi_lambda0, 
				  arma::vec prior_m, int nBI=500, int nMC = 1500)
    {

        // initialize random number generator;
		RNGScope scope;  

		// declare generalized regression object and set values;	
	    slice_mcmc b(Nobs0, Ngroups0, xP0, xQ0, t0, censorship0, Q0, qcutpoints0, index0, gap0, censor0, P0, pcutpoints0, group0, sigma_norm0, sigma_gammaB0, sigma_gammaR0, lower_limits0, upper_limits0, slice_widths0);
		
	    // create parameter vector container and initial values for chain i;	
	    arma::vec parmsl(b.nAll);
		parmsl.rows(0,b.NpredsP-1) = init_theta0[0];                                        // c(gamma1,beta1)
		parmsl.rows(b.NpredsP,b.NpredsQ+b.NpredsP-1) = init_theta0[1];                      // c(gamma2,beta2)
		parmsl.rows(b.NpredsQ+b.NpredsP,b.NpredsQ+b.NpredsP+1) = init_theta0[2];            // c(theta,eta)
		//parmsl.rows(b.NpredsQ+b.NpredsP+2,b.NpredsQ+b.NpredsP+2+b.P-1) = init_theta0[3];    // plambda
		//parmsl.rows(b.NpredsQ+b.NpredsP+2+b.P,b.nAll-1) = init_theta0[4];                   // qlambda

        arma::wall_clock timer, timer_slice, timer_re, timer_weight, timer_prob;
        timer.tic();
		
		// sample initial values of random effects
		arma::vec mu_init(Ngroups0), nu_init(Ngroups0);
        for (int i=0;i<Ngroups0;i++)
	    {
            mu_init[i] = R::rgamma(1/(init_theta0[2][0]),(init_theta0[2][0]));
	        nu_init[i] = R::rgamma(1/(init_theta0[2][1]),(init_theta0[2][1]));         
        }
		
		double time_init = timer.toc(), time_slice = 0, time_re = 0;
		
		Rcout << "time_init:" << time_init << std::endl;
		
	    // Construct container for mcmc samples;
		arma::mat sample1(nMC,b.nAll), sample2(nMC,b.nAll-1), sample3(nMC,b.nAll-1); 	
		arma::mat sample1_mu(nMC,Ngroups0), sample1_nu(nMC,Ngroups0), sample1_r(nMC,b.P), sample1_l(nMC,b.Q);
		std::vector<arma::vec> g_parms1, g_parms2, g_parms3, b_parms1, b_parms2, b_parms3;
		arma::uvec indice_lambda = {0,1,3,4,5}, row_both = {0,2}, col_both = {1,3,4,5};


        for (int M=1;M<4;M++)
        {
			if (M == 1)
			{
			    arma::vec parmsl_1 = parmsl;
				arma::vec mu1 = mu_init, nu1 = nu_init, br = exp(init_theta0[3]), bl = exp(init_theta0[4]);
				for (int s=-nBI;s<nMC;s++)
	            {
                    timer_slice.tic();
                    slice(parmsl_1,b,M,mu1,nu1,br,bl);
                    time_slice += timer_slice.toc();	

					timer_re.tic();
					b_parms1 = b.BH(parmsl_1,M,mu1,nu1);
					for (int p=0;p<b.P;p++)
					{
						br[p] = R::rgamma(b_parms1[0][p], 1/(b_parms1[2][p]));
					}
					for (int q=0;q<b.Q;q++)
					{
						bl[q] = R::rgamma(b_parms1[1][q], 1/(b_parms1[3][q]));
					}
			        g_parms1 = b.RE(parmsl_1,M,br,bl);					
                    for (int i=0;i<Ngroups0;i++)
	                {
                         mu1[i] = R::rgamma( g_parms1[0][i], 1/( nu1[i]*(g_parms1[2][i])+g_parms1[3][i]+1/(parmsl_1[b.NpredsQ+b.NpredsP]) ) );
	                     nu1[i] = R::rgamma( g_parms1[1][i], 1/( mu1[i]*(g_parms1[2][i])+1/(parmsl_1[b.NpredsQ+b.NpredsP+1]) ) );         
                    }		                   			
					time_re += timer_re.toc();		
			        if (s>=0)
					{ 
					    sample1.row(s)    = parmsl_1.t();
                        sample1_mu.row(s) = mu1.t();
                        sample1_nu.row(s) = nu1.t();	
                        sample1_r.row(s)  = br.t();
                        sample1_l.row(s)  = bl.t();						
					}	
		        }
			}
			else if (M == 2)
			{
			    arma::vec parmsl_2 = parmsl.rows(indice_lambda);				
				arma::vec mu2 = mu_init, nu2 = nu_init, br = exp(init_theta0[3]), bl = exp(init_theta0[4]);
				for (int s=-nBI;s<nMC;s++)
	            {
                    slice(parmsl_2,b,M,mu2,nu2,br,bl);
					
					b_parms2 = b.BH(parmsl_2,M,mu2,nu2);
					for (int p=0;p<b.P;p++)
					{
						br[p] = R::rgamma(b_parms2[0][p], 1/b_parms2[2][p]);
					}
					for (int q=0;q<b.Q;q++)
					{
						bl[q] = R::rgamma(b_parms2[1][q], 1/b_parms2[3][q]);
					}
			        g_parms2 = b.RE(parmsl_2,M,br,bl);					
                    for (int i=0;i<Ngroups0;i++)
	                {
                         mu2[i] = R::rgamma( g_parms2[0][i], 1/( nu2[i]*g_parms2[2][i]+g_parms2[3][i]+1/(parmsl_2[b.NpredsQ+b.NpredsP-1]) ) );
	                     nu2[i] = R::rgamma( g_parms2[1][i], 1/( mu2[i]*g_parms2[2][i]+1/(parmsl_2[b.NpredsQ+b.NpredsP]) ) );         
                   }					
			        if (s>=0)
					{ 
					    sample2.row(s)    = parmsl_2.t();						
					}	
		        }
			}
			else if (M == 3)
			{
			    arma::vec parmsl_3 = parmsl.rows(1,b.nAll-1);
				arma::vec mu3 = mu_init, nu3 = nu_init, br = exp(init_theta0[3]), bl = exp(init_theta0[4]);
			    for (int s=-nBI;s<nMC;s++)
	            {
                    slice(parmsl_3,b,M,mu3,nu3,br,bl);
					
					b_parms3 = b.BH(parmsl_3,M,mu3,nu3);
					for (int p=0;p<b.P;p++)
					{
						br[p] = R::rgamma(b_parms3[0][p], 1/b_parms3[2][p]);
					}
					for (int q=0;q<b.Q;q++)
					{
						bl[q] = R::rgamma(b_parms3[1][q], 1/b_parms3[3][q]);
					}
                    g_parms3 = b.RE(parmsl_3,M,br,bl);					
                    for (int i=0;i<Ngroups0;i++)
	                {
                         mu3[i] = R::rgamma( g_parms3[0][i], 1/( nu3[i]*g_parms3[2][i]+g_parms3[3][i]+1/(parmsl_3[b.NpredsQ+b.NpredsP-1]) ) );
	                     nu3[i] = R::rgamma( g_parms3[1][i], 1/( mu3[i]*g_parms3[2][i]+1/(parmsl_3[b.NpredsQ+b.NpredsP]) ) );         
                     }					
			        if (s>=0)
					{ 
					    sample3.row(s)    = parmsl_3.t();					
					}	
		        }
			}
		}

		Rcout << "time_slice:" << time_slice << std::endl;
		Rcout << "time_re:" << time_re << std::endl;
		
        //arma::vec estimates1 = (mean(sample1)).t();  // gamma_r, beta_r, gamma_lambda, beta_lambda, theta, eta, plambda, qlambda
		//arma::vec estimates2 = (mean(sample2)).t();  // gamma_r, beta_r, beta_lambda, theta, eta, plambda, qlambda
		//arma::vec estimates3 = (mean(sample3)).t();  // beta_r, gamma_lambda, beta_lambda, theta, eta, plambda, qlambda
		
		timer_weight.tic();
         		
		// compute the weight functions 
		arma::mat sample_w(nMC,b.nAll+b.P+b.Q);
		//sample_w.cols(0,b.nAll-1) = sample1;
		sample_w.cols(0,b.nAll-3) = sample1.cols(0,b.nAll-3);
		sample_w.cols(b.nAll-2,b.nAll-1) = log(sample1.cols(b.nAll-2,b.nAll-1));
		sample_w.cols(b.nAll,b.nAll+b.P-1) = log(sample1_r);
		sample_w.cols(b.nAll+b.P,b.nAll+b.P+b.Q-1) = log(sample1_l);
		arma::vec means  = (mean(sample_w)).t();
		arma::mat Sigma  = cov(sample_w);
        arma::rowvec temp_lambda(b.nAll-1), temp_r(b.nAll-1);
		arma::mat sigma_lambda_temp(b.nAll-1,b.nAll-1), sigma_r_temp(b.nAll-1,b.nAll-1), sigma_both_temp(b.nAll-2,b.nAll-2), temp_both(2,b.nAll-2);
				
		temp_r      = (Sigma.row(0)).cols(1,b.nAll-1);
		arma::uvec no = {2};
		temp_lambda = Sigma.submat(no,indice_lambda);
		temp_both   = Sigma.submat(row_both,col_both);

        sigma_r_temp      = Sigma.submat(1,1,b.nAll-1,b.nAll-1);
		sigma_lambda_temp = Sigma.submat(indice_lambda,indice_lambda);
		sigma_both_temp   = Sigma.submat(col_both,col_both);
		
				
		// estimate marginal likelihood conditional on M1, M2 (beta_lambda fixed), M3(beta_r fixed), M4(beta_r, beta_lambda fixed)
		double w_lambda, w_r, w_both, mu_lambda, mu_r;
		arma::vec margin(4, arma::fill::zeros), margin_mu(4, arma::fill::zeros), margin_taylor(4, arma::fill::zeros), mu_both;
		arma::mat mu_lambda_temp, mu_r_temp, sigma_lambda, sigma_r, sigma_both, mu_both_temp;
		
		sigma_r      = Sigma(0,0) - temp_r*(sigma_r_temp.i())*(temp_r.t());
		sigma_lambda = Sigma(2,2) - temp_lambda*(sigma_lambda_temp.i())*(temp_lambda.t());
		sigma_both   = Sigma.submat(row_both,row_both) - temp_both*(sigma_both_temp.i())*(temp_both.t());
		
		mu_r_temp       = temp_r*(sigma_r_temp.i());
		mu_lambda_temp  = temp_lambda*(sigma_lambda_temp.i());
		mu_both_temp    = temp_both*(sigma_both_temp.i());


		arma::mat post_w(nMC,4); 	
		margin[0] = nMC;				
		for (int i=0;i<nMC;i++)
		{		
			arma::vec samples_i = sample1.row(i).t(), mu_i = sample1_mu.row(i).t(), nu_i = sample1_nu.row(i).t(), r_i = sample1_r.row(i).t(), l_i = sample1_l.row(i).t();
			
            mu_r      = ( means[0] + mu_r_temp*(samples_i.rows(1,b.nAll-1) - means.rows(1,b.nAll-1)) ).eval()(0,0);
            w_r       = ( -(samples_i[0]-mu_r)*(samples_i[0]-mu_r)/(2*sigma_r) - 0.5*log(2*3.1415926*sigma_r) ).eval()(0,0);
			
			mu_lambda = means[2] + ( mu_lambda_temp*(samples_i.rows(indice_lambda) - means.rows(indice_lambda)) ).eval()(0,0);
			w_lambda  = ( -(samples_i[2]-mu_lambda)*(samples_i[2]-mu_lambda)/(2*sigma_lambda) - 0.5*log(2*3.1415926*sigma_lambda) ).eval()(0,0) ;
			
			mu_both   = means.rows(row_both) + mu_both_temp*(samples_i.rows(col_both) - means.rows(col_both));
			w_both    = -0.5*log(det(sigma_both)) - ( ((samples_i.rows(row_both) - mu_both).t())*sigma_both.i()*((samples_i.rows(row_both)) - mu_both)/2 ).eval()(0,0) - log(2*3.1415926);
 
			post_w(i,0)       = b.logPD( samples_i, 1, mu_i, nu_i, r_i, l_i );
			post_w(i,1)       = b.logPD( samples_i.rows(indice_lambda), 2, mu_i, nu_i, r_i, l_i ) + w_lambda;
			post_w(i,2)       = b.logPD( samples_i.rows(1,b.nAll-1), 3, mu_i, nu_i, r_i, l_i ) + w_r;
			post_w(i,3)       = b.logPD( samples_i.rows(col_both), 4, mu_i, nu_i, r_i, l_i ) + w_both;
			
			margin[1] += exp( post_w(i,1) - post_w(i,0) );
			margin[2] += exp( post_w(i,2) - post_w(i,0) );
			margin[3] += exp( post_w(i,3) - post_w(i,0) );	
			
		}		
		margin = margin/nMC;	
		
		double time_weight = timer_weight.toc();
		Rcout << "time_weight:" << time_weight << std::endl;
		
		timer_prob.tic();
		
		// compute the posterior model probabilities
		arma::vec pmp(4);
		for (int k=0;k<4;k++)
		{
		    pmp[k] = margin[k]*prior_m[k]/dot(margin,prior_m);
		}
		
		arma::vec estimates = mean(sample_w).t();
				
		// compute the probabilities based on each model
		arma::vec prob(8, arma::fill::zeros);
		for (int i=0;i<nMC;i++)
		{
		    if ( (sample1(i,0)>xi_r0) and (sample1(i,2)>xi_lambda0) )
			{
			    prob[0] += 1;
			}
			if ( (sample1(i,0)>xi_r0) and (sample1(i,2)<xi_lambda0) )
			{
			    prob[1] += 1;
			}
			if ( (sample1(i,0)<xi_r0) and (sample1(i,2)>xi_lambda0) )
			{
			    prob[2] += 1;
			}
			if ( (sample1(i,0)<xi_r0) and (sample1(i,2)<xi_lambda0) )
			{
			    prob[7] += 1;
			}
		    if ( sample2(i,0)>xi_r0 )
			{
			    prob[3] += 1;
			}
			if ( sample2(i,0)<xi_r0 )
			{
			    prob[5] += 1;
			}
			if ( sample3(i,1)>xi_lambda0 )
			{
			    prob[4] += 1;
			}			
			if ( sample3(i,1)<xi_lambda0 )
			{
			    prob[6] += 1;
			}
		}
		prob = prob/nMC;	
	
		double time_prob = timer_prob.toc();
		Rcout << "time_prob:" << time_prob << std::endl;
		
		// compute the posterior hypothesis probabilities
		arma::vec php(4);
		php[0] = pmp[0]*(prob[0]+prob[1]+prob[2]) + pmp[1]*prob[3] + pmp[2]*prob[4] + pmp[3];
		php[1] = pmp[1]*prob[5];
		php[2] = pmp[2]*prob[6];
		php[3] = pmp[0]*prob[7];

				return Rcpp::List::create(  
											Rcpp::Named("estimates")   = estimates,
											Rcpp::Named("margin")      = margin,
                                            Rcpp::Named("PMP")         = pmp,
											Rcpp::Named("Prob")        = prob,
                                            Rcpp::Named("PHP")         = php											
										  );
										
    }
	
')
